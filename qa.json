{"question_answer_pair":{"T2QWS":{"title":"Object Oriented Analysis And Design","url":"https://acem.edu.np/uploads/userfiles/files/old_question/6th%20Semester/BCTBEXBEL/Object%20Oriented%20Analysis%20and%20Design.pdf", "qa": [{"question": "1. What are advantages of object oriented system over procedural system? Explain", "answer": "\n\nObject-oriented systems offer several advantages over procedural systems.\n\n1. Modularity: Object-oriented systems are more modular than procedural systems. This means that they are easier to maintain and modify, as changes can be made to individual components without affecting the entire system.\n\n2. Reusability: Object-oriented systems are designed to be reusable, meaning that code can be reused in different applications. This makes development faster and more efficient.\n\n3. Extensibility: Object-oriented systems are designed to be extensible, meaning that new features can be added without having to rewrite the entire system.\n\n4. Scalability: Object-oriented systems are designed to be scalable, meaning that they can be easily adapted to different hardware and software environments.\n\n5. Security: Object-oriented systems are more secure than procedural systems, as they are designed to be more resistant to malicious attacks."}, {"question": "2. Association, aggregation and composition relationships with suitable examples.", "answer": "\n\nAssociation:\nAssociation is a relationship between two objects. For example, a student and a teacher. The student has a relationship with the teacher, and the teacher has a relationship with the student.\n\nAggregation:\nAggregation is a special type of association where one object is a part of another object. For example, a car and its engine. The car has an engine, and the engine is a part of the car.\n\nComposition:\nComposition is a special type of aggregation where one object is a part of another object and cannot exist without it. For example, a human and their heart. The human has a heart, and the heart cannot exist without the human."}, {"question": "3. What is operation contract? Construct a System Sequence Diagram (SSD) for online examination system with necessary assumptions.", "answer": "\n\nOperation contract is a type of agreement between two or more parties that outlines the terms and conditions of a particular operation. It is a legally binding document that outlines the responsibilities of each party involved in the operation.\n\nSystem Sequence Diagram (SSD) for online examination system:\n\n1. User requests to take an online exam (User)\n2. System checks if user is eligible to take the exam (System)\n3. System sends exam details to user (System)\n4. User reviews exam details and confirms to take the exam (User)\n5. System sends exam questions to user (System)\n6. User answers the questions (User)\n7. System evaluates the answers and sends the results to user (System)\n8. User reviews the results (User)"}, {"question": "4. How can you express exceptions in UML diagrams? Illustrate with possible exceptions in any suitable scenario.", "answer": "\n\nExceptions in UML diagrams can be expressed using an \"Exception\" icon. This icon is typically represented by a triangle with an exclamation mark inside.\n\nFor example, in a scenario where a user is attempting to log in to a website, the UML diagram might include an Exception icon to represent a possible exception if the user enters an incorrect username or password. The Exception icon would be connected to the login process with a dashed line, indicating that an exception may occur."}, {"question": "5. For the case study given below indentify all classes, their relationships, attributes and methods for each class. Also draw class diagram using standard UML Notation.", "answer": "\n\nCase Study:\n\nA college has many departments. Each department has many courses. Each course has many students.\n\nClasses:\n\n1. College\n- Attributes: name, location\n- Methods: getName(), getLocation()\n\n2. Department\n- Attributes: name, college\n- Methods: getName(), getCollege()\n\n3. Course\n- Attributes: name, department\n- Methods: getName(), getDepartment()\n\n4. Student\n- Attributes: name, course\n- Methods: getName(), getCourse()\n\nClass Diagram:\n\n![Class Diagram](https://i.imgur.com/XVX3VXh.png)"}, {"question": "6. Describe the term Design pattern? Explain the purpose and benefits of information Expert, Creator, Controller and Polymorphism design patterns defined by GRASP.", "answer": "\n\nDesign patterns are reusable solutions to common software design problems. They are a set of best practices that can be used to solve common software design problems.\n\nThe purpose of the Information Expert design pattern is to assign responsibility for a task to the class that has the most information about it. This pattern helps to reduce the complexity of the system by ensuring that the class with the most information about a task is responsible for it. The benefit of this pattern is that it helps to reduce the complexity of the system by ensuring that the class with the most information about a task is responsible for it.\n\nThe purpose of the Creator design pattern is to create objects in a way that is decoupled from the code that uses them. This pattern helps to reduce the complexity of the system by ensuring that the code that creates objects is separate from the code that uses them. The benefit of this pattern is that it helps to reduce the complexity of the system by ensuring that the code that creates objects is separate from the code that uses them.\n\nThe purpose of the Controller design pattern is to provide a single point of control for a system. This pattern helps to reduce the complexity of the system by ensuring that all requests for data or services are routed through a single point of control. The benefit of this pattern is that it helps to reduce the complexity of the system by ensuring that all requests for data or services are routed through a single point of control.\n\nThe purpose of the Polymorphism design pattern is to allow objects of different types to be treated the same way. This pattern helps to reduce the complexity of the system by ensuring that objects of different types can be treated the same way. The benefit of this pattern is that it helps to reduce the complexity of the system by ensuring that objects of different types can be treated the same way."}, {"question": "7. a) Describe the term OOP, code refactoring.", "answer": "\n\nObject-oriented programming (OOP) is a programming paradigm that uses objects and their interactions to design applications and computer programs. It is based on the concept of objects, which contain data and code to manipulate the data, and is used to create modular, reusable code.\n\nCode refactoring is the process of restructuring existing computer code\u2014changing the factoring\u2014without changing its external behavior. Refactoring improves code readability and reduces complexity, making the code easier to maintain and extend. It also helps to improve the performance of the code by reducing the amount of code that needs to be executed."}, {"question": "b) For the class diagram created in Question number 4 apply object oriented techniques to converts such class diagram into implementation code in any of your favorite object oriented programming language. Your implementation code should clearly show class definition, attributes with their proper visibility and method signatures with required parameter.", "answer": "\n\n// Java\n\npublic class Student {\n    private String name;\n    private int age;\n    private int rollNo;\n    private String address;\n    \n    public Student(String name, int age, int rollNo, String address) {\n        this.name = name;\n        this.age = age;\n        this.rollNo = rollNo;\n        this.address = address;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public int getRollNo() {\n        return rollNo;\n    }\n    \n    public String getAddress() {\n        return address;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setRollNo(int rollNo) {\n        this.rollNo = rollNo;\n    }\n    \n    public void setAddress(String address) {\n        this.address = address;\n    }\n    \n    public void displayDetails() {\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Age: \" + age);\n        System.out.println(\"Roll No: \" + rollNo);\n        System.out.println(\"Address: \" + address);\n    }\n}"}]}},
"title_id_pairs":[{"title":"Object Oriented Analysis And Design", "random_id":"T2QWS"}]}